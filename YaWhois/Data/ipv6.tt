<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ output extension=".cs" #>
//
// Auto-generated code. Don't edit.
//

using System;
using System.Text.RegularExpressions;

namespace YaWhois.Data
{
    public partial class Assignments
    {
        /// <summary>
        /// Format: Network / MaskLength / Server.
        /// </summary>
        public static readonly Tuple<uint, ushort, string>[] IPv6 = {
<#
        var ttdir = Path.GetDirectoryName(Host.TemplateFile);
        var fileName = Path.Combine(ttdir, "ipv6.txt");
        var lines = File.ReadLines(fileName);
        var re1 = new Regex("^([\\da-fA-F]{4}):([\\da-fA-F]{1,4})::/(\\d+)\\s+([\\w\\.]+)$");
        var linenum = 0;
        foreach (var line in lines) {
            linenum++;

            // skip comments
            if (Regex.IsMatch(line, "^\\s*#|^\\s*$")) continue;

            var m1 = re1.Match(line);
            if (!m1.Success) {
                var msg = string.Format("Invalid format in line \"{0}\"", line);
                this.Host.LogErrors(new CompilerErrorCollection()
                    { new CompilerError(fileName,
                        linenum, 0, "0", // Line, column, error ID.
                        msg)
                    }
                );
                continue;
            }
            var p1 = m1.Groups[1].Value;
            var p2 = m1.Groups[2].Value;
            var len = m1.Groups[3].Value;
            var server = m1.Groups[4].Value;
            var net = (Convert.ToInt32(p1, 16) << 16) + Convert.ToInt32(p2, 16);

            if (server == "6to4")
                server = "\\x0A";
            else if (server == "teredo")
                server = "\\x0B";
            else if (server == "UNALLOCATED")
                server = "\\x06";
            else if (!server.Contains("."))
                server = "whois." + server + ".net";
#>
            Tuple.Create(<#= net #>U, (ushort)<#= len #>, "<#= server #>"),
<#      } #>
        };
    }
}
