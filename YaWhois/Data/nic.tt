<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ output extension=".cs" #>
//
// Auto-generated code. Don't edit.
//

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace YaWhois.Data
{
    public partial class Assignments
    {
        /// <summary>
        /// Key: prefix, Value: whois server.
        /// </summary>
        public static readonly Dictionary<string, string> NicHandlePrefixes = new Dictionary<string, string>()
        {
<#
        var ttdir = Path.GetDirectoryName(Host.TemplateFile);
        var fileName = Path.Combine(ttdir, "nic_prefix.txt");
        var lines = File.ReadLines(fileName);
        var re1 = new Regex("^(\\w+-)\\s+([\\w\\d\\.:-]+)$");
        int linenum = 0;
        foreach (var str in lines)
        {
            linenum++;

            var line = str;

            // skip comments
            if (Regex.IsMatch(line, "^\\s*#|^\\s*$")) continue;

            // cleanup inline comments & spaces
            line = Regex.Replace(line, "#.*$", "").Trim();

            var m1 = re1.Match(line);

            if (!m1.Success)
            {
                var msg = string.Format("Invalid format in line \"{0}\"", line);
                this.Host.LogErrors(new CompilerErrorCollection()
                    { new CompilerError(fileName,
                        linenum, 0, "0", // Line, column, error ID.
                        msg)
                    }
                );
                continue;
            }

            var prefix = m1.Groups[1].Value;
            var server = m1.Groups[2].Value;
#>
            { "<#= prefix #>", "<#= server #>" },
<#
        }
#>
        };


        /// <summary>
        /// Key: suffix, Value: whois server.
        /// </summary>
        public static readonly Dictionary<string, string> NicHandleSuffixes = new Dictionary<string, string>()
        {
<#
        fileName = Path.Combine(ttdir, "nic_suffix.txt");
        lines = File.ReadLines(fileName);
        var re2 = new Regex("^(-\\w+)\\s+([\\w\\d\\.:-]+)$");
        linenum = 0;
        foreach (var str in lines)
        {
            linenum++;

            var line = str;

            // skip comments
            if (Regex.IsMatch(line, "^\\s*#|^\\s*$")) continue;

            // cleanup inline comments & spaces
            line = Regex.Replace(line, "#.*$", "").Trim();

            var m = re2.Match(line);

            if (!m.Success)
            {
                var msg = string.Format("Invalid format in line \"{0}\"", line);
                this.Host.LogErrors(new CompilerErrorCollection()
                    { new CompilerError(fileName,
                        linenum, 0, "0", // Line, column, error ID.
                        msg)
                    }
                );
                continue;
            }

            var suffix = m.Groups[1].Value;
            var server = m.Groups[2].Value;
#>
            { "<#= suffix #>", "<#= server #>" },
<#
        }
#>
        };
    }
}

<#+

#>
