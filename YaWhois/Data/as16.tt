<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ output extension=".cs" #>
//
// Auto-generated code. Don't edit.
//

using System;
using System.Text.RegularExpressions;

namespace YaWhois.Data
{
    public partial class Assignments
    {
        /// <summary>
        /// Format: First / Last / Server.
        /// </summary>
        public static readonly Tuple<ushort, ushort, string>[] AS16 = {
<#
        var ttdir = Path.GetDirectoryName(Host.TemplateFile);
        var fileName = Path.Combine(ttdir, "as16.txt");
        var lines = File.ReadLines(fileName);
        int last_asn = 0;
        int linenum = 0;
        var re1 = new Regex("^([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\w\\.]+)$");
        foreach (var line in lines) {
            linenum++;

            // skip comments
            if (Regex.IsMatch(line, "^\\s*#|^\\s*$")) continue;

            var m1 = re1.Match(line);

            if (!m1.Success) {
                var msg = string.Format("Invalid format in line \"{0}\"", line);
                this.Host.LogErrors(new CompilerErrorCollection()
                    { new CompilerError(fileName,
                        linenum, 0, "0", // Line, column, error ID.
                        msg)
                    }
                );
                continue;
            }

            var first = uint.Parse(m1.Groups[1].Value);
            var last = uint.Parse(m1.Groups[2].Value);
            var server = m1.Groups[3].Value;

            if (last < last_asn) {
                var msg = string.Format("Wrong ASN postion \"{0}\"", line);
                this.Host.LogErrors(new CompilerErrorCollection()
                    { new CompilerError(fileName,
                        linenum, 0, "0", // Line, column, error ID.
                        msg)
                    }
                );
                continue;
            }

            if (!server.Contains("."))
                server = "whois." + server + ".net";
#>
            Tuple.Create((ushort)<#= first #>, (ushort)<#= last #>, "<#= server #>"),
<#
        }
#>
        };
    }
}
